# Docker Compose para desenvolvimento local
version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: telegram-bot-saas-postgres
    environment:
      POSTGRES_USER: telegram_user
      POSTGRES_PASSWORD: telegram_pass
      POSTGRES_DB: telegram_bot_saas
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - telegram-bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U telegram_user -d telegram_bot_saas"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Redis para cache e filas
  redis:
    image: redis:7-alpine
    container_name: telegram-bot-saas-redis
    command: redis-server --appendonly yes --requirepass redis_pass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - telegram-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: telegram-bot-saas-backend
    environment:
      # Database
      DATABASE_URL: postgresql://telegram_user:telegram_pass@postgres:5432/telegram_bot_saas
      
      # Redis
      REDIS_URL: redis://:redis_pass@redis:6379
      
      # Application
      NODE_ENV: production
      PORT: 3333
      API_URL: http://localhost:3333
      
      # JWT
      JWT_SECRET: telegram-bot-manager-super-secret-jwt-key-32-chars-min
      JWT_REFRESH_SECRET: telegram-bot-manager-super-secret-refresh-key-32-chars-min
      
      # Encryption
      ENCRYPTION_KEY: 12345678901234567890123456789012
      
      # Telegram
      TELEGRAM_WEBHOOK_DOMAIN: http://localhost:3333
      
      # Features
      ENABLE_REGISTRATION: "true"
      ENABLE_SWAGGER: "true"
      
      # Logs
      LOG_LEVEL: info
    ports:
      - "3333:3333"
    networks:
      - telegram-bot-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    volumes:
      - ./backend/logs:/app/logs

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: telegram-bot-saas-frontend
    environment:
      # API
      NEXT_PUBLIC_API_URL: http://localhost:3333/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:3333
      
      # App
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_APP_NAME: TelegramBot Manager
      
      # Features
      NEXT_PUBLIC_ENABLE_PWA: "true"
      NEXT_PUBLIC_ENABLE_ANALYTICS: "false"
      NEXT_PUBLIC_DEBUG: "false"
      
      # Next.js
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    ports:
      - "3000:3000"
    networks:
      - telegram-bot-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Nginx Reverse Proxy (opcional)
  nginx:
    image: nginx:alpine
    container_name: telegram-bot-saas-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - telegram-bot-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    profiles:
      - with-nginx

# Networks
networks:
  telegram-bot-network:
    driver: bridge
    name: telegram-bot-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: telegram-bot-saas-postgres
  redis_data:
    driver: local
    name: telegram-bot-saas-redis